{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-content.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('5.2.3');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  MatOption,\n  MatOptionSelectionChange,\n  _getOptionScrollPosition,\n  _countGroupLabelsBeforeOption,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean { return this._panelOpen && this.autocomplete.showPanel; }\n  private _panelOpen: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // Note that in some cases this can end up being called after the component is destroyed.\n      // Add a check to ensure that we don't try to run change detection on a destroyed view.\n      if (!this._componentDestroyed) {\n        // We need to trigger change detection manually, because\n        // `fromEvent` doesn't seem to do it at the proper time.\n        // This ensures that the label is reset when the\n        // user clicks outside.\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  SPACE,\n  UP_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(this._getOptionIndex(option)!);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldPlaceholderFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConfig,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {merge} from 'rxjs/observable/merge';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n    // @deletion-target 6.0.0\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) => {\n        this._elementRef.nativeElement.removeEventListener(event, listener);\n      });\n\n      this._manualListeners.clear();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the tooltip to display */\n  private _createTooltip(): void {\n    const overlayRef = this._createOverlay();\n    const portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance;\n\n    // Dispose of the tooltip when the overlay is detached.\n    merge(this._tooltipInstance!.afterHidden(), overlayRef.detachments()).subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.onPositionChange.subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair);\n        }\n      }\n    });\n\n    const config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n\n  /** Disposes the current tooltip and the overlay it is attached to */\n  private _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<any>};\n\n  /** Index of the given step. */\n  @Input()\n  get index(): number { return this._index; }\n  set index(value: number) { this._index = coerceNumberProperty(value); }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active(): boolean { return this._active; }\n  set active(value: boolean) { this._active = coerceBooleanProperty(value); }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional(): boolean { return this._optional; }\n  set optional(value: boolean) { this._optional = coerceBooleanProperty(value); }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done';\n\n  constructor(public templateRef: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n  TemplateRef,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon} from './stepper-icon';\n\n/** Workaround for https://github.com/angular/angular/issues/17849 */\nexport const _MatStep = CdkStep;\nexport const _MatStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader, {read: ElementRef}) _stepHeader: QueryList<ElementRef>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<any>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n    const editOverride = icons.find(icon => icon.name === 'edit');\n    const doneOverride = icons.find(icon => icon.name === 'done');\n\n    if (editOverride) {\n      this._iconOverrides.edit = editOverride.templateRef;\n    }\n\n    if (doneOverride) {\n      this._iconOverrides.done = doneOverride.templateRef;\n    }\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\nimport {_isNumberValue} from '@angular/cdk/coercion';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA && valueB) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA) {\n        comparatorResult = 1;\n      } else if (valueB) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _content: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering) {\n        if (!this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction = 'ltr';\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const _config = _applyConfigDefaults(config);\n    const snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const injector = this._createInjector(config, snackBarRef);\n    const portal = new ComponentPortal(component, undefined, injector);\n    const contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    return snackBarRef;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return {...new MatSnackBarConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {SortDirection} from './sort-direction';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    this._thumbEl.style.transform = '';\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. */\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n    this._updateElementSize();\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._updateElementSize();\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  /** Updates the spinner element size based on its diameter. */\n  private _updateElementSize() {\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /**\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether or not the radio-button should appear before or after the label.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n * @deletion-target 6.0.0\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value: 'start' | 'end') { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('open') readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('close') readonly onClose: Observable<void> = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Output('align-changed') onAlignChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    // @deletion-target 6.0.0\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  /**\n   * Handles the keyboard events.\n   * @docs-private\n   */\n  handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n    LayoutModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = coerceNumberProperty(value);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex = 0;\n    this._emitPageEvent();\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.emit({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown'> =\n      new EventEmitter<void | 'click' | 'keydown'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._createOverlay().attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._closeSubscription.unsubscribe();\n      this._overlayRef.detach();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MAT_MENU_DEFAULT_OPTIONS, MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_SCROLL_STRATEGY_PROVIDER, MatMenuTrigger} from './menu-trigger';\nimport {MatMenuContent} from './menu-content';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    PortalModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        minWidth: '100%',\n        transform: 'scaleY(0)'\n      }),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ]),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs/Subscription';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatSelectionListBase)));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n * @deletion-target 6.0.0\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, HasTabIndex, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options).withWrap().withTypeAhead();\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focus the selection-list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    // TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    state('enter-start', style({\n      opacity: 1,\n      transform: 'scale(1, 0.5)'\n    })),\n    state('enter', style({\n      transform: 'scale(1, 1)'\n    })),\n    transition('void => enter-start', animate('100ms linear')),\n    transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 6.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    } else if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    if (newValue) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      this._elementRef.nativeElement.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this._formField ? this._formField.underlineRef : this._elementRef;\n  }\n\n  /**\n   * Determines the offset to be used when the calendar goes into a fallback position.\n   * Primarily used to prevent the calendar from overlapping the input.\n   */\n  _getPopupFallbackOffset(): number {\n    return this._formField ? -this._formField._inputContainerRef.nativeElement.clientHeight : 0;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {Directionality} from '@angular/cdk/bidi';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir?: Directionality) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the multi-year view. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._currentView == 'month') {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else if (this._currentView == 'year') {\n      this._handleCalendarBodyKeydownInYearView(event);\n    } else {\n      this._handleCalendarBodyKeydownInMultiYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'month');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  private _handleCalendarBodyKeydownInMultiYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'year');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    const fallbackOffset = this._datepickerInput._getPopupFallbackOffset();\n\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id || this._uid; }\n  set id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip is selectable. When a chip is not selectable,\n   * its selected state is always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        const correspondingChipIndex = this.chips.toArray().indexOf(correspondingChip);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChipIndex);\n        } else {\n          this._keyManager.updateActiveItemIndex(correspondingChipIndex);\n        }\n\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChipList} from './chip-list';\nimport {MatBasicChip, MatChip, MatChipRemove} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n@NgModule({\n  imports: [],\n  exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipRemove, MatBasicChip],\n  declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove,  MatChipRemove, MatBasicChip],\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction = 'ltr';\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: ISubscription = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens\n      .set(MatDialogContainer, dialogContainer)\n      .set(MAT_DIALOG_DATA, config.data)\n      .set(MatDialogRef, dialogRef);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private readonly _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n  get minRows(): number { return this._minRows; }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string = '';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  declarations: [\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(value: 'start' | 'end') {\n    this.labelPosition = (value == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase = mixinColor(mixinDisabled(MatChipBase), 'primary');\n\n\n/**\n * Dummy directive to add CSS class to basic chips.\n * @docs-private\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'},\n})\nexport class MatBasicChip {\n}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable {\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chips are selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly destroy: EventEmitter<MatChipEvent> = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('remove') onRemove: EventEmitter<MatChipEvent> = this.removed;\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      this.valueChange.emit(value);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n  private _value: any = null;\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** The currently selected button toggle, should match the value. */\n  @Input()\n  get selected(): MatButtonToggle | null { return this._selected; }\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n  private _selected: MatButtonToggle | null = null;\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle implements OnInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (this._isSingleSelector && value) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = value;\n\n    if (value && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n  private _checked: boolean = false;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n  private _value: any = null;\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs/Subject';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   * @deletion-target 6.0.0\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n  ThemePalette\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {take} from 'rxjs/operators/take';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nlet nextUniqueId = 0;\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * @deprecated Use `color` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get dividerColor(): ThemePalette { return this.color; }\n  set dividerColor(value: ThemePalette) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this._floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this._floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get floatPlaceholder(): FloatLabelType { return this._floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /** Whether the label should always float, never float or float as the user types. */\n  @Input()\n  get floatLabel(): FloatLabelType { return this._floatLabel; }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Reference to the form field's underline element. */\n  @ViewChild('underline') underlineRef: ElementRef;\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    return !this._hasLabel() || !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    return this._hasLabel() || this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options');\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n\n    // @deletion-target Turn into required param in 6.0.0\n    @Optional() @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)\n        defaults?: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = defaults &&\n        typeof defaults.autoActiveFirstOption !== 'undefined' ?\n            defaults.autoActiveFirstOption :\n            false;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibiity state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n}\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscriber} from 'rxjs/Subscriber';\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    // TODO(mmalerba): replace with checks from PLATFORM, logic currently duplicated to avoid\n    // breaking change from injecting the Platform.\n    const isBrowser = typeof document === 'object' && !!document;\n    const isIE = isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n    this.useUtcForDisplay = !isIE;\n    this._clampDate = isIE || (isBrowser && /(edge)/i.test(navigator.userAgent));\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["this","_selectedIndex","value","coerceNumberProperty","_selectedIndexChanged","_focusIndex","MatTabHeader","prototype","ngAfterContentChecked","_tabLabelCount","_labelWrappers","length","_updatePagination","_changeDetectorRef","markForCheck","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","preventDefault","END","_focusLastTab","ENTER","SPACE","selectFocusedIndex","emit","focusIndex","ngAfterContentInit","_this","dirChange","_dir","change","observableOf","resize","_viewportRuler","realign","requestAnimationFrame","_realignInkBar","merge","subscribe","ngOnDestroy","unsubscribe","_onContentChanges","_checkPaginationEnabled","Object","defineProperty","_isValidIndex","indexFocused","_setTabFocus","index","tab","toArray","disabled","tabIndex","_showPaginationControls","focus","containerEl","_tabListContainer","nativeElement","dir","_getLayoutDirection","scrollLeft","scrollWidth","offsetWidth","_moveFocus","offset","tabs","i","scrollDistance","translateX","_tabList","style","transform","_scrollDistance","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","getOffsetLeft","getOffsetWidth","beforeVisiblePos","afterVisiblePos","isEnabled","_elementRef","_disableScrollBefore","_disableScrollAfter","selectedLabelWrapper","selectedIndex","elementRef","_inkBar","alignToElement","type","Component","args","selector","template","styles","inputs","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","propDecorators","ViewChild","Input","Output","_MatTabHeaderMixinBase","MatTabNavBase","_MatTabNavMixinBase","mixinColor","MatTabNav","_ngZone","_super","call","_onDestroy","Subject","_disableRipple","tslib_1.__extends","_backgroundColor","classList","remove","backgroundColor","add","coerceBooleanProperty","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","runOutsideAngular","pipe","takeUntil","_alignInkBar","next","complete","_tabLinks","forEach","link","disableRipple","exportAs","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","enumerable","configurable","MatTabLink","Directive","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","exports","MatTabGroup","MatTabLabel","MatTab","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","providers","VIEWPORT_RULER_PROVIDER","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","PlatformModule","VERSION","Version","SELECT_PANEL_PADDING_X","active","optional","MatStepHeader","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","height","MatStepperIcon","templateRef","TemplateRef","name","_MatStep","CdkStep","_MatStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","provide","ErrorStateMatcher","useExisting","MatStepper","apply","arguments","icons","_icons","editOverride","find","icon","doneOverride","_iconOverrides","_steps","_destroyed","_stateChanged","ContentChildren","MatHorizontalStepper","aria-orientation","role","animations","ctorParameters","MatVerticalStepper","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","MatStepLabel","MatStepperIntl","MatTable","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","CdkColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","ElementRef","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatRow","MatTableModule","CdkTableModule","MatTableDataSource","initialData","_renderData","BehaviorSubject","_filter","sortingDataAccessor","data","sortHeaderId","_isNumberValue","Number","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_data","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","empty","pageChange","page","_renderChangesSubscription","combineLatest","map","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","ceil","connect","disconnect","DataSource","show","_setStyles","hide","inkBar","left","offsetLeft","width","viewContainerRef","ViewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_labelChange","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_content","matTabsAnimations","translateTab","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_centeringSub","_beforeCentering","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","EventEmitter","_onCentered","_origin","_onTranslateTabStarted","e","toState","clientHeight","_onTranslateTabComplete","fromState","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","selectChange","_groupId","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","_subscribeToTabLabels","_focusChanged","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabHeaderBase","MatSlider","step","thumbLabel","_thumbLabelDeprecated","tickInterval","_tickIntervalDeprecated","vertical","input","_sliderWrapper","_MatSliderMixinBase","MatSliderModule","BidiModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SHOW_ANIMATION","AnimationDurations","ENTERING","AnimationCurves","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","opacity","COMPLEX","STANDARD_CURVE","snackBarState","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","_animationState","attachComponentPortal","portal","_portalOutlet","Error","snackBarConfig","panelClass","extraClasses","_setCssClasses","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","onMicrotaskEmpty","take","Array","isArray","cssClass","[@state]","(@state.done)","BasePortalOutlet","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_config","_applyConfigDefaults","_attach","announce","open","message","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","_createOverlay","container","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSnackBarModule","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","(mouseenter)","(longpress)","(mouseleave)","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","iconOverrides","selected","[style.margin-left.px]","[style.margin-right.px]","MatSidenavContent","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","(keydown)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatDrawer","MatSidenavContainer","_drawers","ContentChild","MatDrawerContainer","MatSidenavModule","MatDrawerContent","MAT_DRAWER_DEFAULT_AUTOSIZE","useValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragX","percentage","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MatProgressSpinner","mode","platform","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","align","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","UNIQUE_SELECTION_DISPATCHER_PROVIDER","MatDrawerToggleResult","animationFinished","_container","_margins","_contentMargins","margins","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","onAlignChanged","onPositionChanged","_modeChanged","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","close","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","autosize","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_tooltipInstance","_disposeTooltip","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_createTooltip","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","TooltipComponent","afterHidden","_getOrigin","overlay","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","onPositionChange","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","isDirectionLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","isLtr","overlayX","overlayY","updatePosition","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_positionDeprecated","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","ɵ0","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","push","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_updateElementSize","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","MatMenu","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","_portal","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","hasBackdrop","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","withDirection","withOffsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_getOptionIndex","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","Boolean","_setSelected","focusedOption","focusedIndex","_emitDeprecatedChangeEvent","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_template","_appRef","context","isAttached","_outlet","DomPortalOutlet","insertBefore","outletElement","ApplicationRef","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_onAnimationDone","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_MatListItemMixinBase","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatListOptionChange","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","_tempValues","_setOptionsFromValues","_modelChanges","_i","added","removed","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","MatIconRegistry","_loadSvgIconSetFromConfig","svgElement","_fetchUrl","url","svgText","_svgElementFromString","_createSvgElementForSingleIcon","responseText","svg","_setSvgAttributes","_extractSvgIconFromSet","iconSet","iconName","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getAttribute","setAttribute","safeUrl","_httpClient","getMatIconNoHttpProviderError","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","namespace","getNamedSvgIcon","_setSvgElement","err","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","MatListBase","_MatListMixinBase","MatListItemBase","_datepicker","_registerInput","MatDatepickerInput","_dateFilter","_validatorOnChange","_dateAdapter","deserialize","_lastValueValid","isValid","_getValidDateOrNull","oldDate","format","_dateFormats","display","dateInput","sameDate","_valueChange","_disabledChange","_datepickerSubscription","selectedChanged","_cvaOnChange","MatDatepickerInputEvent","dateChange","_localeSubscription","registerOnValidatorChange","validate","_validator","getPopupConnectionElementRef","_formField","underlineRef","_getPopupFallbackOffset","_inputContainerRef","_onInput","date","parse","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","_customIcon","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[attr.aria-expanded]","[@expansionHeight]","MatExpansionModule","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","catchError","forkJoin","foundIcon","minDate","maxDate","dateFilter","selectedChange","_userSelection","createMissingDateImplError","_activeDate","today","oldActiveDate","getYear","_init","_selectedYear","_minDate","_maxDate","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","getMonth","activeDate","daysInMonth","getNumDaysInMonth","createDate","getDate","_getActiveCell","yearName","getYearName","MatCalendarCell","_shouldEnableYear","firstOfYear","addCalendarDays","_selectedMonth","_getMonthInCurrentYear","_monthSelected","_todayMonth","_yearLabel","monthNames","getMonthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","toLocaleUpperCase","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","startView","_startAt","_clampedActiveDate","clampDate","_currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","startAt","_focusActiveCell","firstChange","view","monthView","yearView","multiYearView","_dateSelected","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_handleCalendarBodyKeydownInMultiYearView","date1","date2","yearsPerPage","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","_calendar","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_createPopup","keydownEvents","fallbackOffset","MatDialog","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","Validators","compose","localeChanges","registerDatepicker","MatChipList","ariaOrientation","selectable","chips","MatChip","_MatChipListMixinBase","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","chipList","MatChipsModule","MatChipRemove","MatBasicChip","MatDialogConfig","disableClose","maxWidth","ariaDescribedBy","autoFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","_startExitAnimation","[attr.role]","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_result","dialogResult","detachBackdrop","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","getConfig","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxHeight","$implicit","previousValue","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","children","sibling","hasAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_isServer","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","_selectable","_removable","destroyed","onRemove","chip","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","_parentChip","MatChipListBase","MatChipListChange","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","_chipInput","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","correspondingChipIndex","updateActiveItemIndex","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButtonBase","_MatButtonMixinBase","MatButton","_isRoundButton","_hasHostAttributes","_isIconButton","BUTTON_HOST_ATTRIBUTES_1","BUTTON_HOST_ATTRIBUTES","attr","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","attributes","attribute","focusMonitor","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","[class.mat-card-actions-align-end]","_parent","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","MatOptionSelectionChange","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","floatLabel","float","_hideRequiredMarker","_floatLabel","_processHints","_validateControlChild","_control","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_animateAndLockLabel","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","floatPlaceholder","_connectionContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MatAutocomplete","defaults","showPanel","_isOpen","displayWith","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_manuallyFloatingLabel","_closeKeyEventStream","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","closePanel","_resetLabel","_closingActionsSubscription","_outsideClickStream","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","shouldAnimate","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","recalculateLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getHostWidth","_getConnectedElement","readOnly","aria-autocomplete","(focusin)","Host","MatAutocompleteModule","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","_color","colorPalette","defaultTabIndex","matcher","mixinInitialized","_pendingSubscribers","initialized","Observable","subscriber","_notifySubscriber","_markInitialized","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","rect","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","scrollStrategies","reposition","block","defaultOptions","tslib_1.__assign","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","isIE","test","navigator","userAgent","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","RippleRenderer","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","runTimeoutOutsideZone","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_removeTriggerEvents","ngZone","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]"],"mappings":"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"}